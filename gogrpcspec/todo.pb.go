// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/todo.proto

/*
Package gogrpcspec is a generated protocol buffer package.

It is generated from these files:
	proto/todo.proto

It has these top-level messages:
	Employee
	Task
	Summary
	SpecificSummary
*/
package gogrpcspec

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Employee struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Employee) Reset()                    { *m = Employee{} }
func (m *Employee) String() string            { return proto.CompactTextString(m) }
func (*Employee) ProtoMessage()               {}
func (*Employee) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Employee) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Task struct {
	Employee *Employee `protobuf:"bytes,1,opt,name=employee" json:"employee,omitempty"`
	Name     string    `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Status   string    `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Task) GetEmployee() *Employee {
	if m != nil {
		return m.Employee
	}
	return nil
}

func (m *Task) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Task) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type Summary struct {
	TodoTasks  int32 `protobuf:"varint,1,opt,name=todoTasks" json:"todoTasks,omitempty"`
	DoingTasks int32 `protobuf:"varint,2,opt,name=doingTasks" json:"doingTasks,omitempty"`
	DoneTasks  int32 `protobuf:"varint,3,opt,name=doneTasks" json:"doneTasks,omitempty"`
}

func (m *Summary) Reset()                    { *m = Summary{} }
func (m *Summary) String() string            { return proto.CompactTextString(m) }
func (*Summary) ProtoMessage()               {}
func (*Summary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Summary) GetTodoTasks() int32 {
	if m != nil {
		return m.TodoTasks
	}
	return 0
}

func (m *Summary) GetDoingTasks() int32 {
	if m != nil {
		return m.DoingTasks
	}
	return 0
}

func (m *Summary) GetDoneTasks() int32 {
	if m != nil {
		return m.DoneTasks
	}
	return 0
}

type SpecificSummary struct {
	Employee *Employee `protobuf:"bytes,1,opt,name=employee" json:"employee,omitempty"`
	Summary  *Summary  `protobuf:"bytes,2,opt,name=summary" json:"summary,omitempty"`
}

func (m *SpecificSummary) Reset()                    { *m = SpecificSummary{} }
func (m *SpecificSummary) String() string            { return proto.CompactTextString(m) }
func (*SpecificSummary) ProtoMessage()               {}
func (*SpecificSummary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SpecificSummary) GetEmployee() *Employee {
	if m != nil {
		return m.Employee
	}
	return nil
}

func (m *SpecificSummary) GetSummary() *Summary {
	if m != nil {
		return m.Summary
	}
	return nil
}

func init() {
	proto.RegisterType((*Employee)(nil), "gogrpcspec.Employee")
	proto.RegisterType((*Task)(nil), "gogrpcspec.Task")
	proto.RegisterType((*Summary)(nil), "gogrpcspec.Summary")
	proto.RegisterType((*SpecificSummary)(nil), "gogrpcspec.SpecificSummary")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TaskManager service

type TaskManagerClient interface {
	GetSummary(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*SpecificSummary, error)
	AddTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*SpecificSummary, error)
	AddTasks(ctx context.Context, opts ...grpc.CallOption) (TaskManager_AddTasksClient, error)
	GetTasks(ctx context.Context, in *Employee, opts ...grpc.CallOption) (TaskManager_GetTasksClient, error)
	ChangeToDone(ctx context.Context, opts ...grpc.CallOption) (TaskManager_ChangeToDoneClient, error)
}

type taskManagerClient struct {
	cc *grpc.ClientConn
}

func NewTaskManagerClient(cc *grpc.ClientConn) TaskManagerClient {
	return &taskManagerClient{cc}
}

func (c *taskManagerClient) GetSummary(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*SpecificSummary, error) {
	out := new(SpecificSummary)
	err := grpc.Invoke(ctx, "/gogrpcspec.TaskManager/GetSummary", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) AddTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*SpecificSummary, error) {
	out := new(SpecificSummary)
	err := grpc.Invoke(ctx, "/gogrpcspec.TaskManager/AddTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) AddTasks(ctx context.Context, opts ...grpc.CallOption) (TaskManager_AddTasksClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TaskManager_serviceDesc.Streams[0], c.cc, "/gogrpcspec.TaskManager/AddTasks", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskManagerAddTasksClient{stream}
	return x, nil
}

type TaskManager_AddTasksClient interface {
	Send(*Task) error
	CloseAndRecv() (*Summary, error)
	grpc.ClientStream
}

type taskManagerAddTasksClient struct {
	grpc.ClientStream
}

func (x *taskManagerAddTasksClient) Send(m *Task) error {
	return x.ClientStream.SendMsg(m)
}

func (x *taskManagerAddTasksClient) CloseAndRecv() (*Summary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Summary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *taskManagerClient) GetTasks(ctx context.Context, in *Employee, opts ...grpc.CallOption) (TaskManager_GetTasksClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TaskManager_serviceDesc.Streams[1], c.cc, "/gogrpcspec.TaskManager/GetTasks", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskManagerGetTasksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TaskManager_GetTasksClient interface {
	Recv() (*Task, error)
	grpc.ClientStream
}

type taskManagerGetTasksClient struct {
	grpc.ClientStream
}

func (x *taskManagerGetTasksClient) Recv() (*Task, error) {
	m := new(Task)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *taskManagerClient) ChangeToDone(ctx context.Context, opts ...grpc.CallOption) (TaskManager_ChangeToDoneClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TaskManager_serviceDesc.Streams[2], c.cc, "/gogrpcspec.TaskManager/ChangeToDone", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskManagerChangeToDoneClient{stream}
	return x, nil
}

type TaskManager_ChangeToDoneClient interface {
	Send(*Task) error
	Recv() (*SpecificSummary, error)
	grpc.ClientStream
}

type taskManagerChangeToDoneClient struct {
	grpc.ClientStream
}

func (x *taskManagerChangeToDoneClient) Send(m *Task) error {
	return x.ClientStream.SendMsg(m)
}

func (x *taskManagerChangeToDoneClient) Recv() (*SpecificSummary, error) {
	m := new(SpecificSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for TaskManager service

type TaskManagerServer interface {
	GetSummary(context.Context, *Employee) (*SpecificSummary, error)
	AddTask(context.Context, *Task) (*SpecificSummary, error)
	AddTasks(TaskManager_AddTasksServer) error
	GetTasks(*Employee, TaskManager_GetTasksServer) error
	ChangeToDone(TaskManager_ChangeToDoneServer) error
}

func RegisterTaskManagerServer(s *grpc.Server, srv TaskManagerServer) {
	s.RegisterService(&_TaskManager_serviceDesc, srv)
}

func _TaskManager_GetSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Employee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).GetSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gogrpcspec.TaskManager/GetSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).GetSummary(ctx, req.(*Employee))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManager_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gogrpcspec.TaskManager/AddTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).AddTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManager_AddTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TaskManagerServer).AddTasks(&taskManagerAddTasksServer{stream})
}

type TaskManager_AddTasksServer interface {
	SendAndClose(*Summary) error
	Recv() (*Task, error)
	grpc.ServerStream
}

type taskManagerAddTasksServer struct {
	grpc.ServerStream
}

func (x *taskManagerAddTasksServer) SendAndClose(m *Summary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *taskManagerAddTasksServer) Recv() (*Task, error) {
	m := new(Task)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TaskManager_GetTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Employee)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaskManagerServer).GetTasks(m, &taskManagerGetTasksServer{stream})
}

type TaskManager_GetTasksServer interface {
	Send(*Task) error
	grpc.ServerStream
}

type taskManagerGetTasksServer struct {
	grpc.ServerStream
}

func (x *taskManagerGetTasksServer) Send(m *Task) error {
	return x.ServerStream.SendMsg(m)
}

func _TaskManager_ChangeToDone_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TaskManagerServer).ChangeToDone(&taskManagerChangeToDoneServer{stream})
}

type TaskManager_ChangeToDoneServer interface {
	Send(*SpecificSummary) error
	Recv() (*Task, error)
	grpc.ServerStream
}

type taskManagerChangeToDoneServer struct {
	grpc.ServerStream
}

func (x *taskManagerChangeToDoneServer) Send(m *SpecificSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *taskManagerChangeToDoneServer) Recv() (*Task, error) {
	m := new(Task)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TaskManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gogrpcspec.TaskManager",
	HandlerType: (*TaskManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSummary",
			Handler:    _TaskManager_GetSummary_Handler,
		},
		{
			MethodName: "AddTask",
			Handler:    _TaskManager_AddTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddTasks",
			Handler:       _TaskManager_AddTasks_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetTasks",
			Handler:       _TaskManager_GetTasks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ChangeToDone",
			Handler:       _TaskManager_ChangeToDone_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/todo.proto",
}

func init() { proto.RegisterFile("proto/todo.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x4f, 0x4f, 0xc2, 0x30,
	0x18, 0xc6, 0x29, 0x20, 0x8c, 0x17, 0x13, 0x49, 0x35, 0x86, 0xa8, 0x21, 0xa6, 0x27, 0x2e, 0xe2,
	0x32, 0xa3, 0x07, 0x6f, 0x04, 0x0d, 0x27, 0x2f, 0x83, 0x2f, 0x50, 0xd7, 0xd7, 0xb9, 0xe8, 0xda,
	0x65, 0x2d, 0x07, 0xbe, 0x9d, 0x1f, 0xcd, 0xac, 0xfb, 0x4b, 0x5c, 0x62, 0xb8, 0x75, 0xcf, 0xfb,
	0xfe, 0x9e, 0xe7, 0x69, 0x56, 0x98, 0x24, 0xa9, 0x32, 0xea, 0xde, 0x28, 0xa1, 0x16, 0xf6, 0x48,
	0x21, 0x54, 0x61, 0x9a, 0x04, 0x3a, 0xc1, 0x80, 0xcd, 0xc0, 0x79, 0x8d, 0x93, 0x6f, 0xb5, 0x47,
	0xa4, 0x14, 0xfa, 0x92, 0xc7, 0x38, 0x25, 0xb7, 0x64, 0x3e, 0xf2, 0xed, 0x99, 0x09, 0xe8, 0x6f,
	0xb9, 0xfe, 0xa2, 0x2e, 0x38, 0x58, 0xec, 0xd9, 0xf9, 0xd8, 0xbb, 0x58, 0xd4, 0x36, 0x8b, 0xd2,
	0xc3, 0xaf, 0xb6, 0x2a, 0xb7, 0x6e, 0xed, 0x46, 0x2f, 0x61, 0xa0, 0x0d, 0x37, 0x3b, 0x3d, 0xed,
	0x59, 0xb5, 0xf8, 0x62, 0x08, 0xc3, 0xcd, 0x2e, 0x8e, 0x79, 0xba, 0xa7, 0x37, 0x30, 0xca, 0xaa,
	0x66, 0xa1, 0xda, 0x26, 0x9d, 0xf8, 0xb5, 0x40, 0x67, 0x00, 0x42, 0x45, 0x32, 0xcc, 0xc7, 0x5d,
	0x3b, 0x6e, 0x28, 0x19, 0x2d, 0x94, 0xc4, 0x7c, 0xdc, 0xcb, 0xe9, 0x4a, 0x60, 0x29, 0x9c, 0x6d,
	0x12, 0x0c, 0xa2, 0x8f, 0x28, 0x28, 0xe3, 0x8e, 0xbf, 0xd7, 0x1d, 0x0c, 0x75, 0x0e, 0xdb, 0xfc,
	0xb1, 0x77, 0xde, 0x04, 0x0a, 0x5f, 0xbf, 0xdc, 0xf1, 0x7e, 0xba, 0x30, 0xce, 0xd2, 0xdf, 0xb8,
	0xe4, 0x21, 0xa6, 0x74, 0x09, 0xb0, 0x46, 0x53, 0xc6, 0xb7, 0x86, 0x5d, 0x5d, 0x1f, 0x38, 0x1e,
	0x36, 0x66, 0x1d, 0xfa, 0x0c, 0xc3, 0xa5, 0x10, 0xf6, 0xb7, 0x4c, 0x9a, 0x9b, 0x99, 0xf2, 0x1f,
	0xfb, 0x08, 0x4e, 0xc1, 0xea, 0x16, 0xb8, 0xed, 0x2a, 0xac, 0x33, 0x27, 0xf4, 0x09, 0x9c, 0x35,
	0x9a, 0x1c, 0x6b, 0xef, 0xfc, 0xc7, 0x8c, 0x75, 0x5c, 0x42, 0x57, 0x70, 0xba, 0xfa, 0xe4, 0x32,
	0xc4, 0xad, 0x7a, 0x51, 0x12, 0x8f, 0xee, 0x3b, 0x27, 0x2e, 0x79, 0x1f, 0xd8, 0x67, 0xfb, 0xf0,
	0x1b, 0x00, 0x00, 0xff, 0xff, 0x3a, 0x76, 0x42, 0x4a, 0xca, 0x02, 0x00, 0x00,
}
